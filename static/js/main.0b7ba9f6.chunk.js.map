{"version":3,"sources":["components/DragNDrop.js","App.js","serviceWorker.js","index.js"],"names":["DragNDrop","data","useState","list","setList","dragging","setDragging","useEffect","dragItem","useRef","dragItemNode","handleDragEnter","e","targetItem","console","log","current","target","oldList","newList","JSON","parse","stringify","grpI","items","splice","itemI","localStorage","setItem","handleDragEnd","removeEventListener","getStyles","item","className","map","grp","key","title","onDragEnter","length","draggable","onDragStart","addEventListener","setTimeout","handletDragStart","defaultData","App","setData","getItem","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gPAqEeA,MAnEf,YAA4B,IAARC,EAAO,EAAPA,KAAO,EAECC,mBAASD,GAFV,mBAEhBE,EAFgB,KAEVC,EAFU,OAGSF,oBAAS,GAHlB,mBAGhBG,EAHgB,KAGNC,EAHM,KAKvBC,qBAAU,WACNH,EAAQH,KACT,CAACG,EAASH,IAEb,IAAMO,EAAWC,mBACXC,EAAeD,mBAafE,EAAkB,SAACC,EAAGC,GACxBC,QAAQC,IAAI,yBAA0BF,GAClCH,EAAaM,UAAYJ,EAAEK,SAC3BH,QAAQC,IAAI,0CACZX,GAAQ,SAAAc,GACJ,IAAIC,EAAUC,KAAKC,MAAMD,KAAKE,UAAUJ,IAIxC,OAHAC,EAAQN,EAAWU,MAAMC,MAAMC,OAAOZ,EAAWa,MAAO,EAAGP,EAAQX,EAASQ,QAAQO,MAAMC,MAAMC,OAAOjB,EAASQ,QAAQU,MAAM,GAAG,IACjIlB,EAASQ,QAAUH,EACnBc,aAAaC,QAAQ,OAAQR,KAAKE,UAAUH,IACrCA,OAIbU,EAAgB,SAAhBA,EAAiBjB,GACnBN,GAAY,GACZE,EAASQ,QAAU,KACnBN,EAAaM,QAAQc,oBAAoB,UAAWD,GACpDnB,EAAaM,QAAU,MAErBe,EAAY,SAACC,GACf,OAAIxB,EAASQ,QAAQO,OAASS,EAAKT,MAAQf,EAASQ,QAAQU,QAAUM,EAAKN,MAChE,mBAEJ,YAGX,OAAIvB,EAEI,yBAAK8B,UAAU,eACd9B,EAAK+B,KAAI,SAACC,EAAKZ,GAAN,OACR,yBAAKa,IAAKD,EAAIE,MAAOC,YAAajC,IAAa8B,EAAIX,MAAMe,OAAO,SAAC3B,GAAD,OAAOD,EAAgBC,EAAE,CAACW,OAAMG,MAAO,KAAI,KAAMO,UAAU,aACxHE,EAAIX,MAAMU,KAAI,SAACF,EAAMN,GAAP,OACb,yBAAKc,WAAS,EAACJ,IAAKJ,EAAOS,YAAa,SAAC7B,GAAD,OA3C7B,SAACA,EAAGoB,GACzBlB,QAAQC,IAAI,mBAAoBiB,GAEhCtB,EAAaM,QAAUJ,EAAEK,OACzBP,EAAaM,QAAQ0B,iBAAiB,UAAWb,GACjDrB,EAASQ,QAAUgB,EAEnBW,YAAW,WACPrC,GAAY,KACd,GAkCuDsC,CAAiBhC,EAAG,CAACW,OAAMG,WAASY,YAAajC,EAAS,SAACO,GAAOD,EAAgBC,EAAG,CAACW,OAAMG,WAAS,KAAMO,UAAW5B,EAAS0B,EAAU,CAACR,OAAMG,UAAQ,YACpMM,WAOD,MC5Dda,EAAc,CAClB,CAACR,MAAO,UAAWb,MAAO,CAAC,IAAK,IAAK,MACrC,CAACa,MAAO,UAAWb,MAAO,CAAC,IAAK,OAmEnBsB,MAhEf,WAAgB,IAAD,EACW5C,qBADX,mBACND,EADM,KACA8C,EADA,KAUb,OARAxC,qBAAU,WACJoB,aAAaqB,QAAQ,SACvBlC,QAAQC,IAAIY,aAAaqB,QAAQ,SACjCD,EAAQ3B,KAAKC,MAAMM,aAAaqB,QAAQ,WAExCD,EAAQF,KAET,CAACE,IAEF,yBAAKd,UAAU,OACb,4BAAQA,UAAU,cAClB,kBAAC,EAAD,CAAWhC,KAAMA,OCXHgD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.0b7ba9f6.chunk.js","sourcesContent":["import React, {useState, useRef, useEffect} from 'react'\n\nfunction DragNDrop({data}) {\n\n    const [list, setList] = useState(data); \n    const [dragging, setDragging] = useState(false);\n\n    useEffect(() => {\n        setList(data);\n    }, [setList, data])\n\n    const dragItem = useRef();\n    const dragItemNode = useRef();\n    \n    const handletDragStart = (e, item) => {\n        console.log('Starting to drag', item)\n\n        dragItemNode.current = e.target;\n        dragItemNode.current.addEventListener('dragend', handleDragEnd)\n        dragItem.current = item;\n\n        setTimeout(() => {\n            setDragging(true); \n        },0)       \n    }\n    const handleDragEnter = (e, targetItem) => {\n        console.log('Entering a drag target', targetItem)\n        if (dragItemNode.current !== e.target) {\n            console.log('Target is NOT the same as dragged item')\n            setList(oldList => {\n                let newList = JSON.parse(JSON.stringify(oldList))\n                newList[targetItem.grpI].items.splice(targetItem.itemI, 0, newList[dragItem.current.grpI].items.splice(dragItem.current.itemI,1)[0])\n                dragItem.current = targetItem;\n                localStorage.setItem('List', JSON.stringify(newList));\n                return newList\n            })\n        }\n    }\n    const handleDragEnd = (e) => {\n        setDragging(false);\n        dragItem.current = null;\n        dragItemNode.current.removeEventListener('dragend', handleDragEnd)\n        dragItemNode.current = null;\n    }\n    const getStyles = (item) => {\n        if (dragItem.current.grpI === item.grpI && dragItem.current.itemI === item.itemI) {\n            return \"dnd-item current\"\n        }\n        return \"dnd-item\"\n    }\n\n    if (list) {\n        return (                \n            <div className=\"drag-n-drop\">\n            {list.map((grp, grpI) => (\n              <div key={grp.title} onDragEnter={dragging && !grp.items.length?(e) => handleDragEnter(e,{grpI, itemI: 0}):null} className=\"dnd-group\">\n                {grp.items.map((item, itemI) => (\n                  <div draggable key={item}  onDragStart={(e) => handletDragStart(e, {grpI, itemI})} onDragEnter={dragging?(e) => {handleDragEnter(e, {grpI, itemI})}:null} className={dragging?getStyles({grpI, itemI}):\"dnd-item\"}>\n                    {item}\n                  </div>\n                ))}\n              </div>\n            ))}\n            </div>\n        )\n    } else { return null}\n\n}\n\nexport default DragNDrop;","import React, {useEffect, useState} from 'react';\nimport './App.css';\n\nimport DragNDrop from './components/DragNDrop'\n\nconst defaultData = [\n  {title: 'group 1', items: ['1', '2', '3']},\n  {title: 'group 2', items: ['4', '5']}\n]\n\nfunction App() {\n  const [data, setData] = useState();  \n  useEffect(() => {\n    if (localStorage.getItem('List')) {\n      console.log(localStorage.getItem('List'))\n      setData(JSON.parse(localStorage.getItem('List')))\n    } else {\n      setData(defaultData)\n    }\n  }, [setData])\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n      <DragNDrop data={data} />\n      {/* <div className=\"drag-n-drop\">\n        {data.map((grp, grpI) => (\n          <div key={grp.title} className=\"dnd-group\">\n            {grp.items.map((item, itemI) => (\n              <div draggable key={item} className=\"dnd-item\">\n                {item}\n              </div>\n            ))}\n          </div>\n        ))}\n        </div> */}\n\n          {/* <div className=\"drag-n-drop\">\n            <div className=\"dnd-group\">\n              <div className=\"group-title\">Group 1</div>\n              <div className=\"dnd-item\">\n                <div>\n                  <p>ITEM 1</p>\n                </div>\n              </div>\n              <div className=\"dnd-item\">\n                <div>\n                  <p>ITEM 2</p>\n                </div>\n              </div>\n              <div className=\"dnd-item\">\n                <div>\n                  <p>ITEM 3</p>\n                </div>\n              </div>\n            </div>\n            <div className=\"dnd-group\">\n            <div className=\"group-title\">Group 1</div>\n              <div className=\"dnd-item\">\n                <div>\n                  <p>ITEM 1</p>\n                </div>\n              </div>\n              <div className=\"dnd-item\">\n                <div>\n                  <p>ITEM 2</p>\n                </div>\n              </div>\n            </div>\n          </div> */}\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}